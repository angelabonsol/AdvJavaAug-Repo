package com.cognixia.jump.intermediateJava.streams;

import java.util.Optional;

/**
 * Class Purpose - has main() - also need Person.java class prior to this
 * 		shows use of Optional class with streams
 * 		Optional class wraps and protects results generated by stream operations, in case null is returned
 * 
 * Walk through top to bottom at pace of your choosing.
 */

public class Optionals {
	// main method -> have Person.java built prior to starting
	public static void main(String[] args) {
		
		// Optional -> wrapper around your object
		
		Optional<String> opt1 = Optional.empty();
		System.out.println(opt1);
		
		// .of() method puts your contents of the type specified by your generics <> into the Optional Object
		Optional<String> opt2 = Optional.of("hello");
		
		String str = "world";
		Optional<String> opt3 = Optional.of(str);
		
		System.out.println(opt2 + " " + opt3);

		Optional<Person> opt4 = Optional.of(new Person());
		System.out.println(opt4);
		
		// .get() extracts the contents wrapped by your Optional to the original data type
		System.out.println(opt4.get());
		//System.out.println(opt1.get());
		
		Optional<Person> optNull = Optional.ofNullable(null);
		System.out.println(optNull);
		
		// Optional has many useful methods for checking data vs no data
		if(opt1.isPresent()) {
			System.out.println("Value is present");
		}
		else {
			System.out.println("No value present");
		}
		
	}

}
