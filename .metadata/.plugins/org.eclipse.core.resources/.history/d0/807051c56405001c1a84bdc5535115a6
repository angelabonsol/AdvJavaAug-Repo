package com.cognixia.jump.bridgeCourse.classes;

public class Animal implements Creature{
	
	//Attributes 
	String type; 
	private int weight; 
	// static attribute 
	private static int count = 0;
	
	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public int getWeight() {
		return weight;
	}

	public void setWeight(int weight) {
		this.weight = weight;
	}

	public static int getCount() {
		return count;
	}

	public static void setCount(int count) {
		Animal.count = count;
	}
	
	// code block 
	{
		System.out.println("This is the regular code block.");
	}
	

	// static code block 
	static {
		count = 0;
		System.out.println("This is our static code block. We have " + count + " aimal objects.");
	}
	//Constructors
	
		//Overloaded constructors 
	public Animal() { //initialization
		this.type = null; 
		this.weight = 0;
		System.out.println("This is our constructor for a " + this.type + 
				" of weight" + this.weight + "lbs.");
		count++;
	}
	
	public Animal(String type, int weight) {
		//this keyword - used to distinguish the instance (object as the reference)
		this.type = type; 
		this.weight = weight;
		System.out.println("This is our constructor for a " + this.type + 
				" of weight" + this.weight + "lbs.");
		count++;
	}
	
	//Methods 
	public void makeNoise(String sound) {
		System.out.println("The " + type + " makes a " + sound + " sound.");
	}
	
	//come back and add static features 
	
	public static String animals() {
	
		return "All " + count + " animals are making noise!"; 
	}

	@Override
	public int move(int x) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void eat() {
		// TODO Auto-generated method stub
		System.out.println("Animal eating.");
	}

}
